#!/usr/bin/env node
// vim: set ft=javascript:

var fs = require('fs'),
    path = require('path'),
    BiwaScheme = require('../release/node_biwascheme'),
    optparse = require('optparse');

function Options(argv){
  var opts = this;
  var parser = new optparse.OptionParser([
    //[      '--encoding', 'Specify encoding (default: utf8)'],
    ['-e', '--eval CODE', 'Evaluate the given string'],
    ['-d', '--debug CODE', 'Compile the sexp and print IL'],
    ['-v', '--version', 'Show version'],
    ['-h', '--help', 'Show this message']
  ]);

  parser.banner = [
    ('BiwaScheme version ' + BiwaScheme.VERSION),
    'Usage: biwas [options] foo.scm',
    'Example:',
    '  ;; foo.scm',
    '  (print "Hello, world!")',
  ].join("\n")

  parser.on('eval', function(name, value) {
    opts.code = value;
  });

  parser.on('debug', function(name, value) {
    opts.debugee = value
  });

  parser.on('version', function() {
    console.log("BiwaScheme version "+BiwaScheme.VERSION);
    process.exit(0);
  });

  parser.on('help', function() {
    console.log(parser.toString());
    process.exit(0);
  });

  opts.args = parser.parse(argv);
  opts.parser = parser;
}

function repl(){
  var rl = require('readline').createInterface(
    process.stdin,
    process.stdout
  );
  var erred = new Object();

  var prompts = {
    base: 'biwascheme> ',
    cont: '...           '
  };

  var code_to_evaluate = '';

  rl.on('line', function(line) {
    code_to_evaluate += ' ' + line;

      try{
        var result = BiwaScheme.run(code_to_evaluate, {no_print: true});
      } catch (e) {
        if (e instanceof BiwaScheme.Parser.Unterminated) {
          rl.setPrompt(prompts.cont);
          rl.prompt();
          return;
        }
        console.error(e);
        var result = erred;
      }

      if (result !== erred && !(result instanceof BiwaScheme.Pause)) {
        console.log(BiwaScheme.to_write(result));
      }

      code_to_evaluate = '';
      rl.setPrompt(prompts.base);

    if (!(result instanceof BiwaScheme.Pause)) {
      rl.prompt();
    }
  });

  var prompt = prompts.base;
  rl.setPrompt(prompt);

  console.log('BiwaScheme version ' + BiwaScheme.VERSION);
  console.log('try (+ 1 2), etc. (Ctrl-D to exit)');

  BiwaScheme.Port.current_input = new BiwaScheme.Port.CustomInput(
    function (callback) {
      rl.question('', function (line) {
        callback(line);
        rl.prompt()
      })
    }
  );

  rl.prompt();
}

function show_ir(debugee) {
  const parser = new BiwaScheme.Parser(debugee);
  const compiler = new BiwaScheme.Compiler();
  const expr = parser.getObject();
  const expr2 = BiwaScheme.Compiler.expand(expr);
  const vmcode = compiler.run(expr2);
  console.log(JSON.stringify(vmcode.il));
}

function main(){
  var opts = new Options(process.argv.slice(2));

  if (opts.code) {
    BiwaScheme.run(opts.code, {no_print: true});
  } else if (opts.debugee) {
    show_ir(opts.debugee);
  } else {
    if(opts.args.length >= 1){
      var src = require('fs').readFileSync(opts.args[0], 'utf8');
      BiwaScheme.run(src);
    }
    else{
      repl();
    }
  }
}

main();
